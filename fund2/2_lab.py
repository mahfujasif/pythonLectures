# # 1. perfect number
# def meth():
#     inp = int(input("Please enter a number to check:"))
#     divisors = {1}
#     for i in range(2, (inp // 2) + 1):
#         if inp % i == 0:
#             divisors.add(i)
#             divisors.add(inp // i)
#     sm = 0
#     for i in divisors:
#         sm += i
#     print(divisors)
#     if sm == inp:
#         print(inp, " is perfect.")
#     else:
#         print(inp, " is not perfect.")
#
# while True:
#     meth()


# # 2. Continuing on task 1, we would like to check a whole range of number
# # and decide what each number is: abundant, deficient, or perfect. In this
# # way we can look for more perfect numbers. Write a program so that we
# # get the following results:
#
# def meth(inp):
#     divisors = {1}
#     for i in range(2, (inp // 2) + 1):
#         if inp % i == 0:
#             divisors.add(i)
#             divisors.add(inp // i)
#     sm = 0
#     for i in divisors:
#         sm += i
#     # print(divisors)
#     if sm == inp:
#         print(inp, " is perfect.")
#     elif sm < inp:
#         print(inp, " is deficient.")
#     else:
#         print(inp, " is abundant.")
#
# while True:
#     rng = int(input("What is the upper number for the range:"))
#     for i in range(2, rng+1):
#         meth(i)

#
# # 3. Write a program that plays a “hi-low” number guessing game. The
# # program starts by generating a random number hidden from the user that
# # is between 0 and 100. The user then attempts to guess the number, getting
# # hints as to which direction (bigger or smaller, higher or lower) to go on
# # the next guess. The game can end in one of two ways:
# # -The user can correctly guess the number.
# # -The user can quit playing by entering a number out of the range of 0–
# # 100.
#
# import random
# nmb = random.randrange(0,101)
# print(nmb)
# while True:
#     guess = int(input("Guess the number: "))
#     if guess > 100:
#         break
#     elif guess == nmb:
#         print("Right")
#         break
#     elif guess < nmb:
#         print("Bigger...")
#     else:
#         print("Smaller...")


# # 4. Write a program to generate the hailstone sequence which is formed by
# # applying the formula below to the initial number and then repeatedly to
# # each number generated by the formula. The result is a sequence of
# # integers ending at 1. For example, if you start with 5, you get the
# # following sequence: 5, 16, 8, 4, 2, 1. The hailstone formula is as follows:
# # -If the number is even, divide it by 2.
# # -If the number is odd, multiply by 3 and add 1.
# # -When the number reaches 1, quit.
#
# src = int(input("Enter the source number for hailstone: "))
# seq = [src]
# while src != 1:
#     if src % 2 == 0:
#         src = src//2
#     else:
#         src = (src * 3) + 1
#     seq.append(src)
#
# print(seq)
